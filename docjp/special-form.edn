{:.
 {:brief "TODO",
  :docjp
  "The instance member form works for both fields and methods.\n  They all expand into calls to the dot operator at macroexpansion time.",
  :tips "TODO"},
 :def
 {:brief "TODO",
  :docjp
  "Creates and interns a global var with the name\n  of symbol in the current namespace (*ns*) or locates such a var if\n  it already exists.  If init is supplied, it is evaluated, and the\n  root binding of the var is set to the resulting value.  If init is\n  not supplied, the root binding of the var is unaffected.",
  :tips "TODO"},
 :do
 {:brief "TODO",
  :docjp
  "Evaluates the expressions in order and returns the value of\n  the last. If no expressions are supplied, returns nil.",
  :tips "TODO"},
 :if
 {:brief "TODO",
  :docjp
  "Evaluates test. If not the singular values nil or false,\n  evaluates and yields then, otherwise, evaluates and yields else. If\n  else is not supplied it defaults to nil.",
  :tips "TODO"},
 :monitor-enter
 {:brief "TODO",
  :docjp
  "Synchronization primitive that should be avoided\n  in user code. Use the 'locking' macro.",
  :tips "TODO"},
 :monitor-exit
 {:brief "TODO",
  :docjp
  "Synchronization primitive that should be avoided\n  in user code. Use the 'locking' macro.",
  :tips "TODO"},
 :new
 {:brief "TODO",
  :docjp
  "The args, if any, are evaluated from left to right, and\n  passed to the constructor of the class named by Classname. The\n  constructed object is returned.",
  :tips "TODO"},
 :quote
 {:brief "TODO", :docjp "Yields the unevaluated form.", :tips "TODO"},
 :recur
 {:brief "TODO",
  :docjp
  "Evaluates the exprs in order, then, in parallel, rebinds\n  the bindings of the recursion point to the values of the exprs.\n  Execution then jumps back to the recursion point, a loop or fn method.",
  :tips "TODO"},
 :set!
 {:brief "TODO",
  :docjp
  "Used to set thread-local-bound vars, Java object instance\nfields, and Java class static fields.",
  :tips "TODO"},
 :throw
 {:brief "TODO",
  :docjp
  "The expr is evaluated and thrown, therefore it should\n  yield an instance of some derivee of Throwable.",
  :tips "TODO"},
 :try
 {:brief "TODO",
  :docjp
  "catch-clause => (catch classname name expr*)\n  finally-clause => (finally expr*)\n\n  Catches and handles Java exceptions.",
  :tips "TODO"},
 :var
 {:brief "TODO",
  :docjp
  "The symbol must resolve to a var, and the Var object\nitself (not its value) is returned. The reader macro #'x expands to (var x).",
  :tips "TODO"}}
